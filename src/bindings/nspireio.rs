#![allow(dead_code)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
/* automatically generated by rust-bindgen 0.71.1 */

pub const NIO_CHAR_WIDTH: u32 = 6;
pub const NIO_CHAR_HEIGHT: u32 = 8;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const QUEUE_SIZE: u32 = 500;
pub const HISTORY_LINES: u32 = 6;
pub const NIO_KEY_UP: u32 = 128;
pub const NIO_KEY_DOWN: u32 = 129;
pub const NIO_KEY_ESC: u32 = 130;
pub const NIO_CURSOR_BLOCK: u32 = 0;
pub const NIO_CURSOR_UNDERSCORE: u32 = 1;
pub const NIO_CURSOR_VERTICAL: u32 = 2;
pub const NIO_CURSOR_CUSTOM: u32 = 3;
pub const NIO_CURSOR_ADAPTIVE: u32 = 4;
unsafe extern "C" {
    pub fn nio_vram_pixel_set(
        x: ::core::ffi::c_uint,
        y: ::core::ffi::c_uint,
        color: ::core::ffi::c_uint,
    );
}
unsafe extern "C" {
    pub fn nio_vram_fill(
        x: ::core::ffi::c_uint,
        y: ::core::ffi::c_uint,
        w: ::core::ffi::c_uint,
        h: ::core::ffi::c_uint,
        color: ::core::ffi::c_uint,
    );
}
unsafe extern "C" {
    pub fn nio_vram_draw();
}
unsafe extern "C" {
    pub fn nio_vram_scroll(
        x: ::core::ffi::c_uint,
        y: ::core::ffi::c_uint,
        w: ::core::ffi::c_uint,
        h: ::core::ffi::c_uint,
        scroll: ::core::ffi::c_uint,
        color: ::core::ffi::c_uint,
    );
}
unsafe extern "C" {
    pub fn nio_cursor_clock() -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    pub fn nio_ascii_get(adaptive_cursor_state: *mut ::core::ffi::c_int) -> ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " Checks if there is data available at the serial port.\n@return true if new data is available."]
    pub fn uart_ready() -> bool;
}
unsafe extern "C" {
    #[doc = " See [getchar](http://www.cplusplus.com/reference/clibrary/cstdio/getchar/)\n@return Char"]
    pub fn uart_getchar() -> ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " See [gets](http://www.cplusplus.com/reference/clibrary/cstdio/gets/)\n@return Destination"]
    pub fn uart_gets(str_: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " Like [gets](http://www.cplusplus.com/reference/clibrary/cstdio/gets/), but with a maximum length parameter"]
    pub fn uart_getsn(
        str_: *mut ::core::ffi::c_char,
        num: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " See [putchar](http://www.cplusplus.com/reference/clibrary/cstdio/putchar/)"]
    pub fn uart_putchar(character: ::core::ffi::c_char) -> ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " See [puts](http://www.cplusplus.com/reference/clibrary/cstdio/puts/)\n\\note This DOES NOT append a newline (\\\\n) character."]
    pub fn uart_puts(str_: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [printf](http://www.cplusplus.com/reference/clibrary/cstdio/printf/)"]
    pub fn uart_printf(format: *mut ::core::ffi::c_char, ...);
}
#[doc = " queue structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct queue {
    pub data: [::core::ffi::c_char; 501usize],
    pub start: ::core::ffi::c_int,
    pub end: ::core::ffi::c_int,
    pub count: ::core::ffi::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of queue"][::core::mem::size_of::<queue>() - 516usize];
    ["Alignment of queue"][::core::mem::align_of::<queue>() - 4usize];
    ["Offset of field: queue::data"][::core::mem::offset_of!(queue, data) - 0usize];
    ["Offset of field: queue::start"][::core::mem::offset_of!(queue, start) - 504usize];
    ["Offset of field: queue::end"][::core::mem::offset_of!(queue, end) - 508usize];
    ["Offset of field: queue::count"][::core::mem::offset_of!(queue, count) - 512usize];
};
unsafe extern "C" {
    #[doc = " Initialize queue.\n@param q Queue to initialize"]
    pub fn queue_init(q: *mut queue);
}
unsafe extern "C" {
    #[doc = " Push value to the end of the queue.\n@param q Queue\n@param val Value to push"]
    pub fn queue_put(q: *mut queue, val: ::core::ffi::c_char);
}
unsafe extern "C" {
    #[doc = " Get value from the end of the queue.\n@param q Queue\n@return the value"]
    pub fn queue_get_top(q: *mut queue) -> ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " Get value from the beginning of the queue.\n@param q Queue\n@return the value"]
    pub fn queue_get(q: *mut queue) -> ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " Check if the queue is empty.\n@param q Queue\n@return true if empty"]
    pub fn queue_empty(q: *mut queue) -> bool;
}
pub const NIO_COLOR_BLACK: _bindgen_ty_1 = 0;
pub const NIO_COLOR_RED: _bindgen_ty_1 = 1;
pub const NIO_COLOR_GREEN: _bindgen_ty_1 = 2;
pub const NIO_COLOR_YELLOW: _bindgen_ty_1 = 3;
pub const NIO_COLOR_BLUE: _bindgen_ty_1 = 4;
pub const NIO_COLOR_MAGENTA: _bindgen_ty_1 = 5;
pub const NIO_COLOR_CYAN: _bindgen_ty_1 = 6;
pub const NIO_COLOR_GRAY: _bindgen_ty_1 = 7;
pub const NIO_COLOR_LIGHTBLACK: _bindgen_ty_1 = 8;
pub const NIO_COLOR_LIGHTRED: _bindgen_ty_1 = 9;
pub const NIO_COLOR_LIGHTGREEN: _bindgen_ty_1 = 10;
pub const NIO_COLOR_LIGHTYELLOW: _bindgen_ty_1 = 11;
pub const NIO_COLOR_LIGHTBLUE: _bindgen_ty_1 = 12;
pub const NIO_COLOR_LIGHTMAGENTA: _bindgen_ty_1 = 13;
pub const NIO_COLOR_LIGHTCYAN: _bindgen_ty_1 = 14;
pub const NIO_COLOR_WHITE: _bindgen_ty_1 = 15;
#[doc = " Color defines"]
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
pub type nio_console = *mut ::core::ffi::c_void;
unsafe extern "C" {
    #[doc = " Draws a char to the VRAM on the given position. For internal use.\n@param x x position in columns\n@param y y position in rows\n@param ch Char\n@param bgColor Background color\n@param textColor text color"]
    pub fn nio_vram_pixel_putc(
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        ch: ::core::ffi::c_char,
        bgColor: ::core::ffi::c_int,
        textColor: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Draws a string to the VRAM on the given position. For internal use.\n@param x x position in columns\n@param y y position in rows\n@param str String\n@param bgColor Background color\n@param textColor text color"]
    pub fn nio_vram_pixel_puts(
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        str_: *const ::core::ffi::c_char,
        bgColor: ::core::ffi::c_int,
        textColor: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Draws a string to the VRAM on the given position. For internal use.\n@param offset_x x offset in px\n@param offset_y y offset in px\n@param x x position in columns (px*NIO_CHAR_WIDTH)\n@param y y position in rows (px*NIO_CHAR_HEIGHT)\n@param str String\n@param bgColor Background color\n@param textColor text color"]
    pub fn nio_vram_grid_puts(
        offset_x: ::core::ffi::c_int,
        offset_y: ::core::ffi::c_int,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        str_: *const ::core::ffi::c_char,
        bgColor: ::core::ffi::c_uchar,
        textColor: ::core::ffi::c_uchar,
    );
}
unsafe extern "C" {
    #[doc = " Draws a char to the VRAM on the given position. For internal use.\n@param offset_x x offset in px\n@param offset_y y offset in px\n@param x x position in columns (px*NIO_CHAR_WIDTH)\n@param y y position in rows (px*NIO_CHAR_HEIGHT)\n@param ch Char\n@param bgColor Background color\n@param textColor text color"]
    pub fn nio_vram_grid_putc(
        offset_x: ::core::ffi::c_int,
        offset_y: ::core::ffi::c_int,
        x: ::core::ffi::c_int,
        y: ::core::ffi::c_int,
        ch: ::core::ffi::c_char,
        bgColor: ::core::ffi::c_uchar,
        textColor: ::core::ffi::c_uchar,
    );
}
unsafe extern "C" {
    #[doc = " Loads a console from a file on flash storage.\n@param path File path\n@param c Console\n@return true if successful"]
    pub fn nio_load(path: *const ::core::ffi::c_char, c: *mut nio_console) -> bool;
}
unsafe extern "C" {
    #[doc = " Saves a console to a file on flash storage.\n@param path File path\n@param c Console\n@return true if successful"]
    pub fn nio_save(path: *const ::core::ffi::c_char, c: *const nio_console) -> bool;
}
unsafe extern "C" {
    #[doc = " Sets a default console that will be used for all functions without console argument, e.g. nio_puts()\n@param c Console"]
    pub fn nio_set_default(c: *mut nio_console);
}
unsafe extern "C" {
    #[doc = " Give control to a function when waiting for input (i.e. the cursor is flashing).\nUseful for performing background tasks.\nThe callback function should return 0 on success or a non-zero value to abort input.\n@param c console\n@param cb Callback function\n@param data Data passed to the callback function"]
    pub fn nio_set_idle_callback(
        c: *mut nio_console,
        callback: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
        >,
        data: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    #[doc = " Gets the default console.\n@return default console"]
    pub fn nio_get_default() -> *mut nio_console;
}
unsafe extern "C" {
    #[doc = " Clears a console.\n@param c Console"]
    pub fn nio_clear(c: *mut nio_console);
}
unsafe extern "C" {
    #[doc = " Scrolls a console one line down.\n@param c Console"]
    pub fn nio_scroll(c: *mut nio_console);
}
unsafe extern "C" {
    #[doc = " Draws a char from the console to the VRAM. For internal use.\n@param c Console\n@param pos_x x position\n@param pos_y y position"]
    pub fn nio_vram_csl_drawchar(
        c: *mut nio_console,
        pos_x: ::core::ffi::c_int,
        pos_y: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Saves a char in a console without drawing it. For internal use.\n@param c Console\n@param ch Char\n@param pos_x x position\n@param pos_y y position"]
    pub fn nio_csl_savechar(
        c: *mut nio_console,
        ch: ::core::ffi::c_char,
        pos_x: ::core::ffi::c_int,
        pos_y: ::core::ffi::c_int,
    );
}
unsafe extern "C" {
    #[doc = " Sets the background- and text color of a console. You can use the predefined colors (NIO_COLOR_*)\n@param c Console\n@param background_color Background color\n@param foreground_color Text color"]
    pub fn nio_color(
        c: *mut nio_console,
        background_color: ::core::ffi::c_uchar,
        foreground_color: ::core::ffi::c_uchar,
    );
}
unsafe extern "C" {
    #[doc = " Changes the drawing behavior of a console.\n@param c Console\n@param enable_drawing If this is true, a console will automatically be updated if text is written to it."]
    pub fn nio_drawing_enabled(c: *mut nio_console, enable_drawing: bool);
}
unsafe extern "C" {
    #[doc = " Initializes a console.\n@param c Console\n@param size_x console width. Use NIO_MAX_COLS to get a full-width console.\n@param size_y console height. Use NIO_MAX_ROWS to get a full-height console.\n@param offset_x x position\n@param offset_y y position\n@param background_color Background color. Use predefined colors (NIO_COLOR_*)\n@param foreground_color Text color. Use predefined colors (NIO_COLOR_*)\n@param drawing_enabled See nio_drawing_enabled()\n@return true if successful"]
    pub fn nio_init(
        c: *mut nio_console,
        size_x: ::core::ffi::c_int,
        size_y: ::core::ffi::c_int,
        offset_x: ::core::ffi::c_int,
        offset_y: ::core::ffi::c_int,
        background_color: ::core::ffi::c_uchar,
        foreground_color: ::core::ffi::c_uchar,
        drawing_enabled: bool,
    ) -> bool;
}
unsafe extern "C" {
    #[doc = " Uninitializes a console. This should always be called before the program ends.\n@param c Console"]
    pub fn nio_free(c: *mut nio_console);
}
unsafe extern "C" {
    #[doc = " See [fflush](http://www.cplusplus.com/reference/clibrary/cstdio/fflush/)\n\\note This is useful for consoles with enable_drawing set to false. Using this function draws the console to the screen."]
    pub fn nio_fflush(c: *mut nio_console) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [fputc](http://www.cplusplus.com/reference/clibrary/cstdio/fputc/)"]
    pub fn nio_fputc(character: ::core::ffi::c_int, c: *mut nio_console) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [write](http://pubs.opengroup.org/onlinepubs/9699919799/functions/write.html)\n\\note For use in libsyscalls."]
    pub fn nio_write(
        c: *mut nio_console,
        ptr: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [putchar](http://www.cplusplus.com/reference/clibrary/cstdio/putchar/)"]
    pub fn nio_putchar(character: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [fputs](http://www.cplusplus.com/reference/clibrary/cstdio/fputs/)"]
    pub fn nio_fputs(str_: *const ::core::ffi::c_char, c: *mut nio_console) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [puts](http://www.cplusplus.com/reference/clibrary/cstdio/puts/)"]
    pub fn nio_puts(str_: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [fgetc](http://www.cplusplus.com/reference/clibrary/cstdio/fgetc)"]
    pub fn nio_fgetc(c: *mut nio_console) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [getchar](http://www.cplusplus.com/reference/clibrary/cstdio/getchar)"]
    pub fn nio_getchar() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [read](http://pubs.opengroup.org/onlinepubs/9699919799/functions/read.html)\n\\note For use in libsyscalls."]
    pub fn nio_read(
        csl: *mut nio_console,
        str_: *mut ::core::ffi::c_char,
        num: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [fgets](http://www.cplusplus.com/reference/clibrary/cstdio/fgets/)"]
    pub fn nio_fgets(
        str_: *mut ::core::ffi::c_char,
        num: ::core::ffi::c_int,
        c: *mut nio_console,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " See [gets](http://www.cplusplus.com/reference/clibrary/cstdio/gets/)"]
    pub fn nio_gets(str_: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " Like [gets](http://www.cplusplus.com/reference/clibrary/cstdio/gets/), but with a maximum length parameter"]
    pub fn nio_getsn(
        str_: *mut ::core::ffi::c_char,
        num: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    #[doc = " See [fprintf](http://www.cplusplus.com/reference/clibrary/cstdio/fprintf/)"]
    pub fn nio_fprintf(
        c: *mut nio_console,
        format: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [printf](http://www.cplusplus.com/reference/clibrary/cstdio/printf/)"]
    pub fn nio_printf(format: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [perror](http://www.cplusplus.com/reference/clibrary/cstdio/perror/)"]
    pub fn nio_perror(str_: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    #[doc = " See [_getch](http://msdn.microsoft.com/de-de/library/078sfkak\\(v=vs.80\\).aspx)\n\\note unlike _getch, this takes a console as an argument!"]
    pub fn nio_getch(c: *mut nio_console) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [_getch](http://msdn.microsoft.com/de-de/library/078sfkak(v=vs.80).aspx)"]
    pub fn nio__getch() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [_getche](http://msdn.microsoft.com/de-de/library/kswce429\\(v=vs.80\\).aspx)\n\\note unlike _getche, this takes a console as an argument!"]
    pub fn nio_getche(c: *mut nio_console) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " See [_getche](http://msdn.microsoft.com/de-de/library/kswce429\\(v=vs.80\\).aspx)"]
    pub fn nio__getche() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    #[doc = " Returns the current time.\n@return Current RTC time"]
    pub fn nio_time_get() -> ::core::ffi::c_uint;
}
unsafe extern "C" {
    #[doc = " Draws the cursor of the console, if enabled.\n@param c Console"]
    pub fn nio_cursor_draw(c: *mut nio_console);
}
unsafe extern "C" {
    #[doc = " Erases the cursor of the console, if enabled.\n@param c Console"]
    pub fn nio_cursor_erase(c: *mut nio_console);
}
unsafe extern "C" {
    #[doc = " Draws a blinking cursor, if enabled. Blinking occurs on an interval set inside the console.\n@param c Console"]
    pub fn nio_cursor_blinking_draw(c: *mut nio_console);
}
unsafe extern "C" {
    #[doc = " Resets the blinking cursor timer.\n@param c Console"]
    pub fn nio_cursor_blinking_reset(c: *mut nio_console);
}
unsafe extern "C" {
    #[doc = " Enables the console cursor.\n@param c Console\n@param enable_cursor When this is true, a cursor will be drawn to the screen, false: no cursor shown."]
    pub fn nio_cursor_enable(c: *mut nio_console, enable_cursor: bool);
}
unsafe extern "C" {
    #[doc = " Enables console cursor blinking.\n@param c Console\n@param enable_cursor_blink When this is true, the cursor will blink, false: no cursor blinking will occur."]
    pub fn nio_cursor_blinking_enable(c: *mut nio_console, enable_cursor_blink: bool);
}
unsafe extern "C" {
    #[doc = " Sets the console cursor blink duration (the time it takes to switch on or off)\n@param c Console\n@param duration The time (in seconds) it takes to switch on or off."]
    pub fn nio_cursor_blinking_duration(c: *mut nio_console, duration: ::core::ffi::c_int);
}
unsafe extern "C" {
    #[doc = " Sets the console cursor type.\n@param c Console\n@param cursor_type The cursor type. 0 is a block cursor (like a\nLinux X11 terminal), 1 is an underscore cursor (like a Windows Command\nPrompt window), 2 is a vertical bar cursor (like a regular text box),\n3 is a custom cursor that is set via nio_cursor_custom, and 4 is an\nadaptive cursor: It shows the current state of shift/ctrl/caps (default).\n\nIf you specify an invalid value, NspireIO will silenty fail and set the\ncursor type to 0, a block cursor.\n\nYou may also use the predefined types as arguments. (NIO_CURSOR_*)"]
    pub fn nio_cursor_type(c: *mut nio_console, cursor_type: ::core::ffi::c_int);
}
unsafe extern "C" {
    #[doc = " Sets the console cursor width.\n@param c Console\n@param cursor_width The cursor line width. This only applies to cursors\n1 and 2 (underscore and vertical bar). All others cursor types will not\nbe affected by this setting.\n\nFor the underscore cursor, it must be greater than 0 and less than or\nequal to CHAR_HEIGHT (as defined by\tcharmap.h). At the time of writing,\nCHAR_HEIGHT is 8. Therefore, for an underscore cursor,\n0 < cursor_width <= 8.\n\nFor a vertical bar cursor, it must be greater than 0 and less than or\nequal to CHAR_WIDTH (as defined by charmap.h). At the time of writing,\nCHAR_WIDTH is 6. Therefore, for a vertical bar cursor, 0 < cursor_width < 6.\n\nIf you wish to draw a blank cursor, you probably should disable the cursor\naltogether with nio_cursor_enable(nio_console, false).\n\nNote that if you specify an out-of-range value, NspireIO will silently fail\nand reset the cursor width to 1."]
    pub fn nio_cursor_width(c: *mut nio_console, cursor_width: ::core::ffi::c_int);
}
unsafe extern "C" {
    #[doc = " Sets the console cursor width.\n@param c Console\n@param cursor_data The custom cursor data. This is in the form of a char[6]\narray. This pretty much uses the format (and the drawing code) for character\ndrawing, so take a look at charmap.h for examples. Note that the characters\nin charmap.h are truncated, so they will display differently.\n\nBy default, if this is not specified and the cursor type is set to the\ncustom cursor type (3), the custom cursor will be set to\n{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF} (a block cursor)."]
    pub fn nio_cursor_custom(c: *mut nio_console, cursor_data: *mut ::core::ffi::c_uchar);
}
